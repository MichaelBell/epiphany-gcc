2014-04-03  Joern Rennecke  <joern.rennecke@embecosm.com>

gcc:
	PR rtl-optimization/60651
	* mode-switching.c (optimize_mode_switching): Make sure to emit
	sets of a lower numbered entity before sets of a higher numbered
	entity to a mode of the same or lower priority.
	When creating a seginfo for a basic block that starts with a code
	label, move the insertion point past the code label.
	(new_seginfo): Document and enforce requirement that
	NOTE_INSN_BASIC_BLOCK only appears for empty blocks.
	* doc/tm.texi.in: Document ordering constraint for emitted mode sets.
	* doc/tm.texi: Regenerate.
gcc/testsuite:
	PR rtl-optimization/60651
	* gcc.target/epiphany/mode-switch.c: New test.

2013-07-30  Joern Rennecke <joern.rennecke@embecosm.com>

	PR rtl-optimization/58029
	* alias.c (base_alias_check): Allow for aliases between stack-
	and frame-pointer referenced memory.

2013-07-29  Joern Rennecke <joern.rennecke@embecosm.com>
	merged from trunk:

	* config/epiphany/epiphany.md (*isub_i+2): New peephole.
	(ashlv2si3): New expander.
	(*ashlv2si3_i): New define_insn_and_split.
	* predicates.md (float_operation): Allow patterns with three
	basic sub-patterns.

	testsuite:
	* gcc.dg/tree-ssa/pr44258.c: Disable scan test for Epiphany.

	PR rtl-optimization/58021
	* mode-switching.c (create_pre_exit): Always split off
	preceding insns if we are not at the basic block head.

2013-07-27  Joern Rennecke <joern.rennecke@embecosm.com>

	merged from trunk:
	* config/epiphany/epiphany.c (epiphany_compute_frame_size):
	Also reserve space for saving UNKNOWN_REGNUM for leaf functions.

2013-07-26  Joern Rennecke <joern.rennecke@embecosm.com>
	merged from trunk:

  2013-07-26  Joern Rennecke <joern.rennecke@embecosm.com>
	testsuite:
	Skip tests that make assumptions about struct layout that don't hold
	on epiphany:
	* g++.dg/cpp0x/cast.C: Skip for epiphany-*-*.
	* g++.dg/cpp0x/iop.C: Likewise.
	* g++.dg/cpp0x/named_refs.C: Likewise.
	* g++.dg/cpp0x/rv1p.C: Likewise.
	* g++.dg/cpp0x/rv2p.C: Likewise.
	* g++.dg/cpp0x/rv3p.C: Likewise.
	* g++.dg/cpp0x/rv4p.C: Likewise.
	* g++.dg/cpp0x/rv5p.C: Likewise.
	* g++.dg/cpp0x/rv6p.C: Likewise.
	* g++.dg/cpp0x/rv7p.C: Likewise.
	* g++.dg/cpp0x/rv8p.C: Likewise.
	* g++.dg/ext/strncpy-chk1.C: Likewise.
	* gcc.dg/builtin-object-size-10.c: Likewise.
	* gcc.dg/builtin-object-size-11.c: Likewise.
	* gcc.dg/builtin-stringop-chk-1.c: Likewise.
	* gcc.dg/pr25805.c: Likewise.
	* gcc.c-torture/execute/builtins/memcpy-chk.x: New file.
	* gcc.c-torture/execute/builtins/memmove-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/mempcpy-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/memset-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/snprintf-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/sprintf-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/stpcpy-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/strcat-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/strcpy-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/strncat-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/strncpy-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/vsnprintf-chk.x: Likewise.
	* gcc.c-torture/execute/builtins/vsprintf-chk.x: Likewise.
	* gcc.c-torture/execute/zerolen-2.x: Likewise.
	* gcc.c-torture/execute/builtins/stpcpy-chk.x: New file.

	* gcc.dg/pr27095.c: For Epiphany, add -mshort-calls.
	* gcc.dg/tree-ssa/loop-1.c: Likewise. 

	* gcc.dg/torture/pr37868.c: Disable for epiphany.
	* gcc.dg/sibcall-6.c: Enable for epiphany.

2013-07-24  Joern Rennecke  <joern.rennecke@embecosm.com>

	* mode-switching.c (create_pre_exit): Allow instructions that
	don't set a return register to need a non-exit mode.

2013-05-09  Joern Rennecke  <joern.rennecke@embecosm.com>

	merged from trunk:

  2013-05-03  Joern Rennecke <joern.rennecke@embecosm.com>
	PR tree-optimization/57027
	* tree-ssa-math-opts.c (convert_mult_to_fma): When checking
	for fnms opportunity, check we got the prerequisite kind
	of tree / gimple before using accessor functions.
  2013-04-10  Joern Rennecke <joern.rennecke@embecosm.com>
	gcc:
	PR tree-optimization/55524
	* tree-ssa-math-opts.c
	(convert_mult_to_fma): Don't use an fms construct
	when we don't have an fms operation, but fnma, and it looks
	likely that we'll be able to use the latter.
	testsuite:
	PR tree-optimization/55524
	* gcc.target/epiphany/fnma-1.c: New test.
  2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>
	* config/epiphany/epiphany.md (<insn_opname>v2si3):
	Use gen_addsi3_i / gen_subsi3_i.
  2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>
	* config/epiphany/epiphany.md (mov_f+2): New peephole2 pattern.
	(cstoresi4): Also allow re-use of zero result when doing a NE
	comparison to a non-zero operand.
	Use (clobber (sratch)) for first insn if the gpr output is not needed.
  2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>
	* config/epiphany/epiphany.md (logical_op): New code iterator.
	(op_mnc): New code attribute.
	(<op_mnc>_f, mov_f, cstoresi4): New patterns.
	(mov_f+1, mov_f+2): New peephole2 patterns.
  2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>
	* config/epiphany/constraints.md (CnL): New constraint.
	* config/epiphany/epiphany.md (addsi3_i): Add r/r/CnL alternative.
	* config/epiphany/predicates.md (add_operand): Allow 1024.
  2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>
	* config/epiphany/epiphany.c (epiphany_select_cc_mode):
	Don't use CC_FPmode for ORDERED / UNORDERED.
	* config/epiphany/epiphany.md (cmpsf_ord): Make pattern
	unconditional.
  2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>
	* config/epiphany/epiphany.md (GPR_1): New constant.
	(define_expand "mov<mode>cc): FAIL if gen_compare_reg returned 0.
	* config/epiphany/epiphany.c (gen_compare_reg):
	For flag_finite_math_only, avoid swapping operands when r0 and/or r1
	is already in place.
	Use GPR_0 / GPR_1 instead of 0/1 for r0/r1 register numbers.
	Don't require being called during rtl expansion; If y operlaps r0,
	return 0.
	(epiphany_compute_frame_size, epiphany_expand_prologue): Use GPR_1.
	(epiphany_expand_epilogue): Likewise.
  2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>
	* config/epiphany/epiphany.h (struct GTY (()) machine_function):
	Add member lr_slot_known.
	* config/epiphany/epiphany.md (reload_insi_ra): Compute lr_slot_offs
	if necessary.
	* config/epiphany/epiphany.c (epiphany_compute_frame_size):
	Remove code that sets lr_slot_offset according to what a previous
	version of epiphany_emit_save_restore used to do.
	(epiphany_emit_save_restore): When doing an lr save or restore,
	set/verify lr_slot_known and lr_slot_offset.
